import os
import atexit
import tempfile
from PIL import Image
import matplotlib.pyplot as plt
import streamlit as st



# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (—Ü–µ –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –ø–µ—Ä—à–æ—é –∫–æ–º–∞–Ω–¥–æ—é Streamlit)
st.set_page_config(
    page_title="–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∞–∫—Ç–æ—Ä—ñ–≤ —É –≤—ñ–¥–µ–æ",
    page_icon="üé¨",
    layout="wide"
)

from streamlit_utils import *

# –°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è (—Ç–µ–ø–µ—Ä –ø—ñ—Å–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏)
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1E88E5;
        text-align: center;
        margin-bottom: 1rem;
    }
    .sub-header {
        font-size: 1.5rem;
        color: #424242;
        margin-bottom: 1rem;
    }
    .stButton > button {
        background-color: #1E88E5;
        color: white;
        font-weight: bold;
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        border: none;
    }
    .stButton > button:hover {
        background-color: #1565C0;
    }
    .info-box {
        background-color: #E3F2FD;
        border-radius: 0.5rem;
        padding: 1rem;
        margin-bottom: 1rem;
    }
    .result-box {
        background-color: #E8F5E9;
        border-radius: 0.5rem;
        padding: 1rem;
        margin-top: 1rem;
    }
    .error-box {
        background-color: #FFEBEE;
        border-radius: 0.5rem;
        padding: 1rem;
        margin-top: 1rem;
    }
    /* –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–¥–µ–æ —Ç–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å */
    .video-container {
        max-height: 400px;
        margin: 0 auto;
        display: flex;
        justify-content: center;
        align-items: center;
    }
    .video-container video {
        max-height: 400px;
        width: auto;
    }
    .image-container {
        max-height: 500px;
        margin: 0 auto;
        display: flex;
        justify-content: center;
        align-items: center;
        text-align: center;
    }
    .image-container img {
        max-height: 500px;
        width: auto;
        margin: 0 auto;
    }
    /* –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ */
    .stVideo {
        text-align: center;
    }
    div[data-testid="stImage"] {
        text-align: center;
        display: flex;
        justify-content: center;
    }
</style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–¥–∞—Ç–∫—É
st.markdown("<h1 class='main-header'>–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∞–∫—Ç–æ—Ä—ñ–≤ —É –≤—ñ–¥–µ–æ</h1>", unsafe_allow_html=True)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Å—ñ—ó
if 'video_file' not in st.session_state:
    st.session_state.video_file = None
if 'temp_file_path' not in st.session_state:
    st.session_state.temp_file_path = None
if 'cap' not in st.session_state:
    st.session_state.cap = None
if 'frame' not in st.session_state:
    st.session_state.frame = None
if 'frame_image' not in st.session_state:
    st.session_state.frame_image = None
if 'recognition_results' not in st.session_state:
    st.session_state.recognition_results = None
if 'detector_loaded' not in st.session_state:
    st.session_state.detector_loaded = False
if 'current_timestamp' not in st.session_state:
    st.session_state.current_timestamp = 0.0
if 'slider_key' not in st.session_state:
    st.session_state.slider_key = 0
if 'stats_ready' not in st.session_state:
    st.session_state.stats_ready = False



# –ë—ñ—á–Ω–∞ –ø–∞–Ω–µ–ª—å –∑ —ñ–º–µ–Ω–∞–º–∏ —É—Å—ñ—Ö –∞–∫—Ç–æ—Ä—ñ–≤ —Ç–∞ –∞–∫—Ç–æ—Ä–æ–∫
st.sidebar.markdown("## –ê–∫—Ç–æ—Ä–∏ —ñ –ê–∫—Ç–æ—Ä–∫–∏")
search = st.sidebar.text_input("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∞–±–æ –ø—Ä—ñ–∑–≤–∏—â–µ")

ukr_names = list(UKR_ACTOR_NAMES.values())
filtered = [name for name in ukr_names if search.lower() in name.lower()]

for name in filtered:
    st.sidebar.markdown(f"‚Ä¢ {name}")



# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ—Ñ–∞–π–ª—É
st.markdown("<h2 class='sub-header'>–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤—ñ–¥–µ–æ</h2>", unsafe_allow_html=True)

with st.markdown("<div class='info-box'>", unsafe_allow_html=True):
    st.markdown("""
    - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É: 50 –ú–ë
    - –ü—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏: MP4, AVI, MOV
    - –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ —è–∫—ñ—Å—Ç—å: HD –∞–±–æ Full HD
    """)
st.markdown("</div>", unsafe_allow_html=True)

uploaded_file = st.file_uploader("–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–µ–æ—Ñ–∞–π–ª", type=["mp4", "avi", "mov"],
                                 help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: 50 –ú–ë")

if uploaded_file is None and st.session_state.video_file is not None:
    reset_state()

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É
if uploaded_file is not None:
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É (–º–∞–∫—Å–∏–º—É–º 200 –ú–ë)
    file_size_mb = uploaded_file.size / (1024 * 1024)

    if file_size_mb > 50:
        st.error(f"–†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É ({file_size_mb:.1f} –ú–ë) –ø–µ—Ä–µ–≤–∏—â—É—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∏–π —Ä–æ–∑–º—ñ—Ä 50 –ú–ë.")
        uploaded_file = None
    else:
        # –Ø–∫—â–æ —Ñ–∞–π–ª –∑–º—ñ–Ω–∏–≤—Å—è, –æ–Ω–æ–≤–ª—é—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Å—ñ—ó
        if st.session_state.video_file != uploaded_file.name:
            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –æ–±'—î–∫—Ç –≤—ñ–¥–µ–æ–∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
            if st.session_state.cap is not None:
                st.session_state.cap.release()

            # –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª, —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
            if st.session_state.temp_file_path is not None and os.path.exists(st.session_state.temp_file_path):
                os.remove(st.session_state.temp_file_path)

            st.session_state.stats_ready = False
            st.session_state.final_stats = None

            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ
            tfile = tempfile.NamedTemporaryFile(delete=False, suffix='.mp4')
            tfile.write(uploaded_file.read())
            st.session_state.temp_file_path = tfile.name
            tfile.close()

            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≤—ñ–¥–µ–æ–∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è
            st.session_state.cap = cv2.VideoCapture(st.session_state.temp_file_path)
            st.session_state.video_file = uploaded_file.name

            # –°–∫–∏–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            st.session_state.frame = None
            st.session_state.frame_image = None
            st.session_state.recognition_results = None
            st.session_state.current_timestamp = 0.0

if st.session_state.cap is not None:
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö –≤—ñ–¥–µ–æ
    fps = st.session_state.cap.get(cv2.CAP_PROP_FPS)
    frame_count = int(st.session_state.cap.get(cv2.CAP_PROP_FRAME_COUNT))
    duration = frame_count / fps
    width = int(st.session_state.cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    height = int(st.session_state.cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

    # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
    col1, col2, col3 = st.columns(3)
    with col1:
        st.info(f"–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {int(duration // 60)}:{int(duration % 60):02d}")
    with col2:
        st.info(f"–ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä—ñ–≤: {fps:.2f} FPS")
    with col3:
        st.info(f"–†–æ–∑–¥—ñ–ª—å–Ω–∞ –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å: {width}x{height}")

    st.markdown("<h2 class='sub-header'>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ –≤—ñ–¥–µ–æ</h2>", unsafe_allow_html=True)
    generate_statistics_once()

    if st.session_state.stats_ready:
        stats = st.session_state.final_stats
        labels = [item['identity'] for item in stats]
        counts = [item['count'] for item in stats]
        total = sum(counts)
        percentages = [count / total * 100 for count in counts]

        total_people = len(stats)
        unknowns = [p for p in stats if p["identity"].startswith("–ù–µ–≤—ñ–¥–æ–º–∞ –æ—Å–æ–±–∞")]
        knowns = [p for p in stats if not p["identity"].startswith("–ù–µ–≤—ñ–¥–æ–º–∞ –æ—Å–æ–±–∞")]

        col1, col2, col3 = st.columns(3)
        with col1:
            st.info(f"üí´ –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –ª—é–¥–µ–π: **{total_people}**")
        with col2:
            st.info(f"üß© –†–æ–∑–ø—ñ–∑–Ω–∞–Ω—ñ –∞–∫—Ç–æ—Ä–∏: **{len(knowns)}**")
        with col3:
            st.info(f"‚ùì –ù–µ–≤—ñ–¥–æ–º—ñ –æ—Å–æ–±–∏: **{len(unknowns)}**")

        fig, ax = plt.subplots(figsize=(7, max(4, len(labels) * 0.4)))
        bars = ax.barh(labels, percentages, color=plt.cm.tab20.colors[:len(labels)])
        ax.set_title("–í—ñ–¥—Å–æ—Ç–æ–∫ –ø–æ—è–≤ –æ–±–ª–∏—á —É –≤—ñ–¥–µ–æ", fontsize=14)
        ax.set_xlabel("–í—ñ–¥—Å–æ—Ç–æ–∫ –∫–∞–¥—Ä—ñ–≤")
        ax.set_ylabel("–û—Å–æ–±–∏")

        for bar, pct in zip(bars, percentages):
            ax.text(bar.get_width() + 1, bar.get_y() + bar.get_height() / 2,
                    f"{pct:.1f}%", va='center', fontsize=9)

        ax.set_xlim(0, max(percentages) * 1.2)
        ax.invert_yaxis()
        st.pyplot(fig)


        st.markdown("</div>", unsafe_allow_html=True)

        # –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ
        st.markdown("<h2 class='sub-header'>–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –≤–º—ñ—Å—Ç –≤—ñ–¥–µ–æ</h2>", unsafe_allow_html=True)

        # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è HTML5 video player –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ —É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ –∑ –æ–±–º–µ–∂–µ–Ω–∏–º —Ä–æ–∑–º—ñ—Ä–æ–º
        video_bytes = open(st.session_state.temp_file_path, 'rb').read()
        st.markdown("<div class='video-container'>", unsafe_allow_html=True)
        # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤ –¥–ª—è —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –≤—ñ–¥–µ–æ
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.video(video_bytes)
        st.markdown("</div>", unsafe_allow_html=True)

        # –û–ø—Ü—ñ—è –¥–ª—è –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–∞–¥—Ä—É
        st.markdown("<h2 class='sub-header'>–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–º–µ–Ω—Ç —á–∞—Å—É –¥–ª—è –∫–∞–¥—Ä—É</h2>", unsafe_allow_html=True)

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ç–∞ —Å–ª–∞–π–¥–µ—Ä–∞
        cl1, cl2, cl3 = st.columns([1, 8, 1])
        with cl1:
            st.button("‚óÄ", on_click=decrease_time, help="–ó–º–µ–Ω—à–∏—Ç–∏ —á–∞—Å–æ–≤–∏–π –∫–æ–¥ –Ω–∞ 0.5 —Å–µ–∫—É–Ω–¥–∏")

        with cl2:
            # –î–∏–Ω–∞–º—ñ—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–∞–π–¥–µ—Ä –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º –∫–ª—é—á–µ–º –¥–ª—è –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
            current_key = f"timestamp_slider_{st.session_state.slider_key}"

            # –î–æ–¥–∞—î–º–æ –∫–ª—é—á –¥–æ session_state –ø–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º
            if current_key not in st.session_state:
                st.session_state[current_key] = st.session_state.current_timestamp

            timestamp = st.slider(
                "–í–∏–±–µ—Ä—ñ—Ç—å —á–∞—Å–æ–≤–∏–π –∫–æ–¥ –∫–∞–¥—Ä—É (—É —Å–µ–∫—É–Ω–¥–∞—Ö)",
                min_value=0.0,
                max_value=float(duration),
                value=st.session_state.current_timestamp,
                step=0.01,
                key=current_key
            )

            # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —á–∞—Å –∑ –∑–Ω–∞—á–µ–Ω–Ω—è —Å–ª–∞–π–¥–µ—Ä–∞
            st.session_state.current_timestamp = timestamp

        with cl3:
            st.button("‚ñ∂", on_click=increase_time, help="–ó–±—ñ–ª—å—à–∏—Ç–∏ —á–∞—Å–æ–≤–∏–π –∫–æ–¥ –Ω–∞ 0.5 —Å–µ–∫—É–Ω–¥–∏")

        # –û–Ω–æ–≤–ª—é—î–º–æ –∫–∞–¥—Ä –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –∫–æ–¥—É
        frame, success = get_frame_at_timestamp(st.session_state.cap, st.session_state.current_timestamp)

        if success:
            st.session_state.frame = frame
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∫–∞–¥—Ä –∑ BGR –≤ RGB –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ Streamlit
            rgb_frame = cv2.cvtColor(frame.copy(), cv2.COLOR_BGR2RGB)
            st.session_state.frame_image = Image.fromarray(rgb_frame)
            # –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            st.session_state.recognition_results = None
        else:
            st.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑—á–∏—Ç–∞—Ç–∏ –∫–∞–¥—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π —á–∞—Å–æ–≤–∏–π –∫–æ–¥.")

        # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∑–∞—Ö–æ–ø–ª–µ–Ω–∏–π –∫–∞–¥—Ä
        if st.session_state.frame_image is not None:
            st.markdown("<div class='image-container'>", unsafe_allow_html=True)
            # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Å—Ç–æ–≤–ø—Ü—ñ–≤ –¥–ª—è —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                st.image(st.session_state.frame_image, caption=f"–ö–∞–¥—Ä –Ω–∞ {st.session_state.current_timestamp:.2f} —Å–µ–∫—É–Ω–¥",
                         use_container_width=False)
            st.markdown("</div>", unsafe_allow_html=True)

        # –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –æ–±–ª–∏—á—á—è –Ω–∞ –∫–∞–¥—Ä—ñ
        if st.session_state.frame_image is not None:
            st.markdown("<h2 class='sub-header'>–†–æ–∑–ø—ñ–∑–Ω–∞–π—Ç–µ –∞–∫—Ç–æ—Ä–∞ –Ω–∞ –∫–∞–¥—Ä—ñ</h2>", unsafe_allow_html=True)

            if st.button("üîç –†–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏", help="–†–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –æ–±–ª–∏—á—á—è –Ω–∞ –∫–∞–¥—Ä—ñ"):
                with st.spinner("üïµÔ∏è‚Äç‚ôÄÔ∏è –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –æ–±–ª–∏—á—á—è..."):
                    frame = st.session_state.frame
                    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ RGB —ñ –ø–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ —Ç–∏–ø –¥–∞–Ω–∏—Ö uint8
                    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                    rgb_frame = ensure_uint8(rgb_frame)

                    try:
                        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é recognize_actors –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
                        # –¢–µ–ø–µ—Ä –≤–æ–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞—î (face_img, actor_name, similarity, facial_area)
                        actor_results = recognize_actors(rgb_frame)

                        # –Ø–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ –≤–∏–∫–∏–Ω—É–ª–∞ –ø–æ–º–∏–ª–∫—É, –∞–ª–µ –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
                        if not actor_results:
                            st.warning("‚ö†Ô∏è –ù–∞ —Ü—å–æ–º—É –∫–∞–¥—Ä—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –æ–±–ª–∏—á—á—è. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –º–æ–º–µ–Ω—Ç –≤—ñ–¥–µ–æ.")
                            st.markdown("<div class='image-container'>", unsafe_allow_html=True)
                            col1, col2, col3 = st.columns([1, 2, 1])
                            with col2:
                                st.image(rgb_frame, caption="–ö–∞–¥—Ä –±–µ–∑ –æ–±–ª–∏—á", use_container_width=False)
                            st.markdown("</div>", unsafe_allow_html=True)
                        else:
                            # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
                            st.success(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(actor_results)} –æ–±–ª–∏—á{'—á—è' if len(actor_results) == 1 else ''}!")

                            # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∫–∞–¥—Ä –∑ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞–º–∏ –æ–±–ª–∏—á —Ç–∞ –ø—ñ–¥–ø–∏—Å–∞–º–∏
                            display_frame_boxes = rgb_frame.copy()

                            # –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –æ–±–ª–∏—á—á—è –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫ —Ç–∞ –ø—ñ–¥–ø–∏—Å
                            for i, (face_img, actor_name, similarity, facial_area) in enumerate(actor_results):
                                # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑ facial_area
                                x, y, w_f, h_f = (
                                    facial_area.get('x', 0),
                                    facial_area.get('y', 0),
                                    facial_area.get('w', 0),
                                    facial_area.get('h', 0)
                                )

                                # –ú–∞–ª—é—î–º–æ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫ –Ω–∞–≤–∫–æ–ª–æ –æ–±–ª–∏—á—á—è
                                brush_stroke_frame(display_frame_boxes, x, y, w_f, h_f)

                            # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –∫–∞–¥—Ä –∑ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–º–∏ –æ–±–ª–∏—á—á—è–º–∏
                            st.markdown("<div class='image-container'>", unsafe_allow_html=True)
                            col1, col2, col3 = st.columns([1, 2, 1])
                            with col2:
                                st.image(display_frame_boxes, caption="–†–æ–∑–ø—ñ–∑–Ω–∞–Ω—ñ –æ–±–ª–∏—á—á—è", use_container_width=False)
                            st.markdown("</div>", unsafe_allow_html=True)

                            # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∫–æ–∂–Ω–µ –æ–±–ª–∏—á—á—è –æ–∫—Ä–µ–º–æ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
                            st.markdown("<h3 class='sub-header'>–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è:</h3>", unsafe_allow_html=True)

                            # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—ñ–ª—å–∫–∏ –∫–æ–ª–æ–Ω–æ–∫, —Å–∫—ñ–ª—å–∫–∏ –æ–±–ª–∏—á –∑–Ω–∞–π–¥–µ–Ω–æ (–º–∞–∫—Å–∏–º—É–º 3 –≤ —Ä—è–¥)
                            faces_per_row = min(3, len(actor_results))

                            for i in range(0, len(actor_results), faces_per_row):
                                cols = st.columns(faces_per_row)
                                for j in range(faces_per_row):
                                    if i + j < len(actor_results):
                                        face_img, actor_name, similarity, _ = actor_results[i + j]

                                        # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –æ–±–ª–∏—á—á—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
                                        face_img = ensure_uint8(face_img)

                                        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–ª—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ
                                        if len(face_img.shape) == 3 and face_img.shape[2] == 3:
                                            # –Ø–∫—â–æ —Ü–µ BGR (–∑ OpenCV), –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –≤ RGB –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ Streamlit
                                            face_img = cv2.cvtColor(face_img, cv2.COLOR_BGR2RGB)
                                            face_img = cv2.resize(face_img, (200, 200))

                                        with cols[j]:
                                            st.image(face_img, caption=f"–û–±–ª–∏—á—á—è #{i + j + 1}", width=200)
                                            if actor_name == 'Unknown':
                                                st.markdown(f"**–ê–∫—Ç–æ—Ä:** –ù–µ–≤—ñ–¥–æ–º–æ")
                                            else:
                                                actor_name = actor_name.replace("_", " ")
                                                st.markdown(f"**–ê–∫—Ç–æ—Ä:** {UKR_ACTOR_NAMES[actor_name]}")
                                                st.markdown(f"**–í—ñ—Ä–æ–≥—ñ–¥–Ω—ñ—Å—Ç—å:** {int(similarity * 100)}%")

                    except ValueError as ve:
                        if "No face detected" in str(ve):
                            st.warning("‚ö†Ô∏è –ù–∞ —Ü—å–æ–º—É –∫–∞–¥—Ä—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –æ–±–ª–∏—á—á—è. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π –º–æ–º–µ–Ω—Ç –≤—ñ–¥–µ–æ.")
                        else:
                            st.error(f"–ü–æ–º–∏–ª–∫–∞: {str(ve)}")
                        st.markdown("<div class='image-container'>", unsafe_allow_html=True)
                        col1, col2, col3 = st.columns([1, 2, 1])
                        with col2:
                            st.image(rgb_frame, caption="–ö–∞–¥—Ä –±–µ–∑ –æ–±–ª–∏—á", use_container_width=False)
                        st.markdown("</div>", unsafe_allow_html=True)
                    except Exception as e:
                        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—ñ –∞–∫—Ç–æ—Ä—ñ–≤: {str(e)}")
                        st.markdown("<div class='image-container'>", unsafe_allow_html=True)
                        col1, col2, col3 = st.columns([1, 2, 1])
                        with col2:
                            st.image(rgb_frame, caption="–ö–∞–¥—Ä –∑ –ø–æ–º–∏–ª–∫–æ—é —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è", use_container_width=False)
                        st.markdown("</div>", unsafe_allow_html=True)

# –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
if uploaded_file is None:
    # –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–Ω–∏–∑—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    st.markdown("<div class='info-box'>", unsafe_allow_html=True)
    st.markdown("""
    ### –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –¥–æ–¥–∞—Ç–∫–æ–º:
    1. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤—ñ–¥–µ–æ—Ñ–∞–π–ª (–¥–æ 50 –ú–ë)
    2. –û–∑–Ω–∞–π–æ–º—Ç–µ—Å—å –∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏—Ö –∞–∫—Ç–æ—Ä—ñ–≤ –¥–ª—è –≤–∞—à–æ–≥–æ –≤—ñ–¥–µ–æ
    3. –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –≤—ñ–¥–µ–æ –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç—É
    4. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø–æ–≤–∑—É–Ω–æ–∫, —â–æ–± –≤–∏–±—Ä–∞—Ç–∏ —á–∞—Å–æ–≤–∏–π –∫–æ–¥ –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ –∫–∞–¥—Ä—É (–∫–∞–¥—Ä –≤—ñ–¥–æ–±—Ä–∞–∑–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)
    5. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ —è–∫—ñ—Å—Ç—å –≤—ñ–¥–µ–æ –∑–∞–¥–æ–≤—ñ–ª—å–Ω–∞ —Ç–∞ –Ω–∞ –∫–∞–¥—Ä—ñ —á—ñ—Ç–∫–æ –≤–∏–¥–Ω–æ –≤—Å–µ –ª–∏—Ü–µ –∞–∫—Ç–æ—Ä–∞/–∞–∫—Ç–æ—Ä–∫–∏
    6. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–†–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏" –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –æ–±–ª–∏—á—á—è –Ω–∞ –∫–∞–¥—Ä—ñ

    **–ü—Ä–∏–º—ñ—Ç–∫–∞:** –í—Ä–∞—Ö–æ–≤—É–π—Ç–µ, —â–æ –¥–∞–ª–µ–∫–æ –Ω–µ –≤—Å—ñ –∞–∫—Ç–æ—Ä–∏ —î —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö. –¢–∞–∫–æ–∂ –∞–ª–≥–æ—Ä–∏—Ç–º –º–æ–∂–µ –ø–æ–º–∏–ª—è—Ç–∏—Å—å,
     —ñ —ñ–Ω–∫–æ–ª–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ –¥–æ—Ç—Ä–∏–º–∞–ª–∏—Å—å –≤—Å—ñ—Ö –æ–ø–∏—Å–∞–Ω–∏—Ö –≤–∏—â–µ –∫—Ä–æ–∫—ñ–≤!  
    """)
    st.markdown("</div>", unsafe_allow_html=True)


# –û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –¥–æ–¥–∞—Ç–∫—É
def cleanup():
    if st.session_state.cap is not None:
        st.session_state.cap.release()
    if st.session_state.temp_file_path is not None and os.path.exists(st.session_state.temp_file_path):
        try:
            os.remove(st.session_state.temp_file_path)
        except:
            pass


# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ñ—É–Ω–∫—Ü—ñ—ó –æ—á–∏—â–µ–Ω–Ω—è
atexit.register(cleanup)

# –ü—Ä–∏–º—ñ—Ç–∫–∞ –≤–Ω–∏–∑—É —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.markdown("---")
st.markdown("üé¨ **–î–æ–¥–∞—Ç–æ–∫ –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∞–∫—Ç–æ—Ä—ñ–≤ —É –≤—ñ–¥–µ–æ** | –ê–≤—Ç–æ—Ä: –Ø—Ä–º–æ—à–µ–Ω–∫–æ –†–æ–º–∞–Ω | –î–ª—è –∫—Ä–∏—Ç–∏–∫–∏ —Ç–∞ –ø–æ—Ä–∞–¥ - Telegram: **@Rygml**üíü")